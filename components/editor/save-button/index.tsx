/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState } from "react";
import { toast } from "sonner";
import { MdDownload } from "react-icons/md";

import Loading from "@/components/loading";
import { Button } from "@/components/ui/button";

export function SaveButton({
  html,
  prompts,
}: {
  html: string;
  prompts: string[];
}) {
  const [loading, setLoading] = useState(false);

  const downloadProject = async () => {
    setLoading(true);

    try {
      // Create a complete HTML file with proper structure
      const completeHtml = html.includes('<!DOCTYPE html>') ? html : `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Project</title>
</head>
<body>
${html}
</body>
</html>`;

      // Create prompts history file
      const promptsContent = `# Project Prompts History

This file contains all the prompts used to create this project:

${prompts.map((prompt, index) => `## Prompt ${index + 1}
${prompt}

---

`).join('')}

Generated by App Builder - Powered by Tapu AI
Date: ${new Date().toLocaleString()}
`;

      // Create README file
      const readmeContent = `# My Website Project

This project was created using **App Builder** - an AI-powered website builder.

## Files Included:
- \`index.html\` - Main HTML file
- \`prompts.md\` - History of AI prompts used
- \`README.md\` - This file

## How to use:
1. Open \`index.html\` in any web browser
2. Upload to any web hosting service
3. Customize further as needed

## Credits:
Generated by [App Builder](https://app-builder.vercel.app) - Powered by Tapu AI

---
*Created on: ${new Date().toLocaleString()}*
`;

      // Create and download ZIP file
      const JSZip = (await import('jszip')).default;
      const zip = new JSZip();
      
      // Add files to ZIP
      zip.file("index.html", completeHtml);
      zip.file("prompts.md", promptsContent);
      zip.file("README.md", readmeContent);
      
      // Generate ZIP blob
      const zipBlob = await zip.generateAsync({ type: "blob" });
      
      // Create download link
      const url = URL.createObjectURL(zipBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `app-builder-project-${new Date().getTime()}.zip`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast.success("Project downloaded successfully! ðŸŽ‰", {
        description: "ZIP file contains HTML, prompts history, and README"
      });

    } catch (err: any) {
      toast.error("Failed to download project", {
        description: err.message || "Please try again"
      });
    } finally {
      setLoading(false);
    }
  };
  return (
    <>
      <Button
        variant="default"
        className="max-lg:hidden bg-[#D4AF37] hover:bg-[#D4AF37]/80 text-black font-medium px-3 py-2 rounded-lg transition-all duration-200"
        onClick={downloadProject}
        disabled={loading}
      >
        {loading ? (
          <Loading className="size-4 animate-spin" />
        ) : (
          <MdDownload className="size-4" />
        )}
        <span className="ml-2">Download</span>
      </Button>
      <Button
        variant="default"
        size="sm"
        className="lg:hidden bg-[#D4AF37] hover:bg-[#D4AF37]/80 text-black font-medium px-3 py-2 rounded-lg"
        onClick={downloadProject}
        disabled={loading}
      >
        {loading ? (
          <Loading className="size-3 animate-spin" />
        ) : (
          <MdDownload className="size-3" />
        )}
        <span className="ml-1 text-sm">Download</span>
      </Button>
    </>
  );
}
